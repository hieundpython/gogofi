// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package services

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User"
(user_name, user_email, first_name, last_name, create_at, active)
VALUES($1, $2, $3, $4, $5, $6) 
RETURNING user_id, user_name, user_email, first_name, last_name, create_at, delete_at, active
`

type CreateUserParams struct {
	UserName  string
	UserEmail string
	FirstName pgtype.Text
	LastName  pgtype.Text
	CreateAt  pgtype.Timestamp
	Active    pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.UserEmail,
		arg.FirstName,
		arg.LastName,
		arg.CreateAt,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.FirstName,
		&i.LastName,
		&i.CreateAt,
		&i.DeleteAt,
		&i.Active,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getListUsers = `-- name: GetListUsers :many
SELECT user_id, user_name, user_email, first_name, last_name, create_at, delete_at, active FROM "User"
ORDER BY user_name
`

func (q *Queries) GetListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.UserEmail,
			&i.FirstName,
			&i.LastName,
			&i.CreateAt,
			&i.DeleteAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, user_name, create_at FROM "User"
WHERE user_id = $1 LIMIT 1
`

type GetUserRow struct {
	UserID     int32
	UserName   string
	UserName_2 string
	CreateAt   pgtype.Timestamp
}

func (q *Queries) GetUser(ctx context.Context, userID int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserName_2,
		&i.CreateAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "User"
SET user_name=$2, first_name=$3, last_name=$4, active=$5
WHERE user_id=$1
RETURNING user_id, user_name, user_email, first_name, last_name, create_at, delete_at, active
`

type UpdateUserParams struct {
	UserID    int32
	UserName  string
	FirstName pgtype.Text
	LastName  pgtype.Text
	Active    pgtype.Bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.FirstName,
		&i.LastName,
		&i.CreateAt,
		&i.DeleteAt,
		&i.Active,
	)
	return i, err
}
